
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Scripting.SSharp.Parser.Ast;

namespace Scripting.SSharp.Parser.FastGrammar
{
  public partial class LRParser
  {
    public LRParser()
    {
      List<ParserState> States = new List<ParserState>();
      //Dictionary<int, NonTerminal> Terms = new Dictionary<int, NonTerminal>();

      States.AddRange(new ParserState[]{
new ParserState(0),
new ParserState(1),
new ParserState(2),
new ParserState(3),
new ParserState(4),
new ParserState(5),
new ParserState(6),
new ParserState(7),
new ParserState(8),
new ParserState(9),
new ParserState(10),
new ParserState(11),
new ParserState(12),
new ParserState(13),
new ParserState(14),
new ParserState(15),
new ParserState(16),
new ParserState(17),
new ParserState(18),
new ParserState(19),
new ParserState(20),
new ParserState(21),
new ParserState(22),
new ParserState(23),
new ParserState(24),
new ParserState(25),
new ParserState(26),
new ParserState(27),
new ParserState(28),
new ParserState(29),
new ParserState(30),
new ParserState(31),
new ParserState(32),
new ParserState(33),
new ParserState(34),
new ParserState(35),
new ParserState(36),
new ParserState(37),
new ParserState(38),
new ParserState(39),
new ParserState(40),
new ParserState(41),
new ParserState(42),
new ParserState(43),
new ParserState(44),
new ParserState(45),
new ParserState(46),
new ParserState(47),
new ParserState(48),
new ParserState(49),
new ParserState(50),
new ParserState(51),
new ParserState(52),
new ParserState(53),
new ParserState(54),
new ParserState(55),
new ParserState(56),
new ParserState(57),
new ParserState(58),
new ParserState(59),
new ParserState(60),
new ParserState(61),
new ParserState(62),
new ParserState(63),
new ParserState(64),
new ParserState(65),
new ParserState(66),
new ParserState(67),
new ParserState(68),
new ParserState(69),
new ParserState(70),
new ParserState(71),
new ParserState(72),
new ParserState(73),
new ParserState(74),
new ParserState(75),
new ParserState(76),
new ParserState(77),
new ParserState(78),
new ParserState(79),
new ParserState(80),
new ParserState(81),
new ParserState(82),
new ParserState(83),
new ParserState(84),
new ParserState(85),
new ParserState(86),
new ParserState(87),
new ParserState(88),
new ParserState(89),
new ParserState(90),
new ParserState(91),
new ParserState(92),
new ParserState(93),
new ParserState(94),
new ParserState(95),
new ParserState(96),
new ParserState(97),
new ParserState(98),
new ParserState(99),
new ParserState(100),
new ParserState(101),
new ParserState(102),
new ParserState(103),
new ParserState(104),
new ParserState(105),
new ParserState(106),
new ParserState(107),
new ParserState(108),
new ParserState(109),
new ParserState(110),
new ParserState(111),
new ParserState(112),
new ParserState(113),
new ParserState(114),
new ParserState(115),
new ParserState(116),
new ParserState(117),
new ParserState(118),
new ParserState(119),
new ParserState(120),
new ParserState(121),
new ParserState(122),
new ParserState(123),
new ParserState(124),
new ParserState(125),
new ParserState(126),
new ParserState(127),
new ParserState(128),
new ParserState(129),
new ParserState(130),
new ParserState(131),
new ParserState(132),
new ParserState(133),
new ParserState(134),
new ParserState(135),
new ParserState(136),
new ParserState(137),
new ParserState(138),
new ParserState(139),
new ParserState(140),
new ParserState(141),
new ParserState(142),
new ParserState(143),
new ParserState(144),
new ParserState(145),
new ParserState(146),
new ParserState(147),
new ParserState(148),
new ParserState(149),
new ParserState(150),
new ParserState(151),
new ParserState(152),
new ParserState(153),
new ParserState(154),
new ParserState(155),
new ParserState(156),
new ParserState(157),
new ParserState(158),
new ParserState(159),
new ParserState(160),
new ParserState(161),
new ParserState(162),
new ParserState(163),
new ParserState(164),
new ParserState(165),
new ParserState(166),
new ParserState(167),
new ParserState(168),
new ParserState(169),
new ParserState(170),
new ParserState(171),
new ParserState(172),
new ParserState(173),
new ParserState(174),
new ParserState(175),
new ParserState(176),
new ParserState(177),
new ParserState(178),
new ParserState(179),
new ParserState(180),
new ParserState(181),
new ParserState(182),
new ParserState(183),
new ParserState(184),
new ParserState(185),
new ParserState(186),
new ParserState(187),
new ParserState(188),
new ParserState(189),
new ParserState(190),
new ParserState(191),
new ParserState(192),
new ParserState(193),
new ParserState(194),
new ParserState(195),
new ParserState(196),
new ParserState(197),
new ParserState(198),
new ParserState(199),
new ParserState(200),
new ParserState(201),
new ParserState(202),
new ParserState(203),
new ParserState(204),
new ParserState(205),
new ParserState(206),
new ParserState(207),
new ParserState(208),
new ParserState(209),
new ParserState(210),
new ParserState(211),
new ParserState(212),
new ParserState(213),
new ParserState(214),
new ParserState(215),
new ParserState(216),
new ParserState(217),
new ParserState(218),
new ParserState(219),
new ParserState(220),
new ParserState(221),
new ParserState(222),
new ParserState(223),
new ParserState(224),
new ParserState(225),
new ParserState(226),
new ParserState(227),
new ParserState(228),
new ParserState(229),
new ParserState(230),
new ParserState(231),
new ParserState(232),
new ParserState(233),
new ParserState(234),
new ParserState(235),
new ParserState(236),
new ParserState(237),
new ParserState(238),
new ParserState(239),
new ParserState(240),
new ParserState(241),
new ParserState(242),
new ParserState(243),
new ParserState(244),
new ParserState(245),
new ParserState(246),
new ParserState(247),
new ParserState(248),
new ParserState(249),
new ParserState(250),
new ParserState(251),
new ParserState(252),
new ParserState(253),
new ParserState(254),
new ParserState(255),
new ParserState(256),
new ParserState(257),
new ParserState(258),
new ParserState(259),
new ParserState(260),
new ParserState(261),
new ParserState(262),
new ParserState(263),
new ParserState(264),
new ParserState(265),
new ParserState(266),
new ParserState(267),
new ParserState(268),
new ParserState(269),
});
      NonTerminal Terms_48 = new NonTerminal("Elements", typeof(Scripting.SSharp.Parser.Ast.ScriptElements), "Elements\b", TermOptions.IsList, 48);
      NonTerminal Terms_59 = new NonTerminal("Prog'", typeof(AstNode), "Prog'\b", TermOptions.None, 59);
      NonTerminal Terms_46 = new NonTerminal("Prog", typeof(Scripting.SSharp.Parser.Ast.ScriptProg), "Prog\b", TermOptions.None, 46);
      NonTerminal Terms_47 = new NonTerminal("Element", typeof(Scripting.SSharp.Parser.Ast.ScriptAst), "Element\b", TermOptions.None, 47);
      NonTerminal Terms_30 = new NonTerminal("Statement", typeof(Scripting.SSharp.Parser.Ast.ScriptStatement), "Statement\b", TermOptions.None, 30);
      NonTerminal Terms_45 = new NonTerminal("Statements(Compound)", typeof(Scripting.SSharp.Parser.Ast.ScriptCompoundStatement), "Statements(Compound)\b", TermOptions.IsList, 45);
      NonTerminal Terms_0 = new NonTerminal("Expr", typeof(Scripting.SSharp.Parser.Ast.ScriptExpr), "Expr\b", TermOptions.None, 0);
      NonTerminal Terms_1 = new NonTerminal("ConstExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptConstExpr), "ConstExpr\b", TermOptions.None, 1);
      NonTerminal Terms_2 = new NonTerminal("BinExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptBinExpr), "BinExpr\b", TermOptions.None, 2);
      NonTerminal Terms_55 = new NonTerminal("*", typeof(AstNode), "*\b", TermOptions.IsList, 55);
      NonTerminal Terms_16 = new NonTerminal("LUnOp", typeof(AstNode), "LUnOp\b", TermOptions.None, 16);
      NonTerminal Terms_72 = new NonTerminal("NT3", typeof(AstNode), "\b", TermOptions.None, 72);
      NonTerminal Terms_51 = new NonTerminal("ParamaterList", typeof(Scripting.SSharp.Parser.Ast.ScriptFuncParameters), "ParamaterList\b", TermOptions.IsStarList, 51);
      NonTerminal Terms_35 = new NonTerminal("OptionalExpression", typeof(Scripting.SSharp.Parser.Ast.ScriptExpr), "OptionalExpression\b", TermOptions.None, 35);
      NonTerminal Terms_43 = new NonTerminal("ExprStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptStatement), "ExprStatement\b", TermOptions.None, 43);
      NonTerminal Terms_15 = new NonTerminal("BinOp", typeof(AstNode), "BinOp\b", TermOptions.None, 15);
      NonTerminal Terms_42 = new NonTerminal("FlowControl", typeof(Scripting.SSharp.Parser.Ast.ScriptFlowControlStatement), "FlowControl\b", TermOptions.None, 42);
      NonTerminal Terms_4 = new NonTerminal("AssignExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptAssignExpr), "AssignExpr\b", TermOptions.None, 4);
      NonTerminal Terms_3 = new NonTerminal("UnaryExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptUnaryExpr), "UnaryExpr\b", TermOptions.None, 3);
      NonTerminal Terms_26 = new NonTerminal("QualifiedName", typeof(Scripting.SSharp.Parser.Ast.ScriptQualifiedName), "QualifiedName\b", TermOptions.None, 26);
      NonTerminal Terms_24 = new NonTerminal("NewStmt", typeof(Scripting.SSharp.Parser.Ast.ScriptNewStmt), "NewStmt\b", TermOptions.None, 24);
      NonTerminal Terms_60 = new NonTerminal("GenericsPostfix?", typeof(AstNode), "\b", TermOptions.None, 60);
      NonTerminal Terms_21 = new NonTerminal("MObjectPart", typeof(Scripting.SSharp.Parser.Ast.ScriptAst), "MObjectPart\b", TermOptions.IsList, 21);
      NonTerminal Terms_23 = new NonTerminal("ExprList", typeof(Scripting.SSharp.Parser.Ast.ScriptExprList), "ExprList\b", TermOptions.IsList, 23);
      NonTerminal Terms_9 = new NonTerminal("RefExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptRefExpr), "RefExpr\b", TermOptions.None, 9);
      NonTerminal Terms_10 = new NonTerminal("VarExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptVarExpr), "VarExpr\b", TermOptions.None, 10);
      NonTerminal Terms_58 = new NonTerminal("idn+", typeof(AstNode), "idn+\b", TermOptions.IsList, 58);
      NonTerminal Terms_73 = new NonTerminal("?", typeof(AstNode), "\b", TermOptions.None, 73);
      NonTerminal Terms_32 = new NonTerminal("WhileStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptWhileStatement), "WhileStatement\b", TermOptions.None, 32);
      NonTerminal Terms_44 = new NonTerminal("BlockStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptStatement), "BlockStatement\b", TermOptions.None, 44);
      NonTerminal Terms_6 = new NonTerminal("IsExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptIsExpr), "IsExpr\b", TermOptions.None, 6);
      NonTerminal Terms_56 = new NonTerminal("*", typeof(AstNode), "*\b", TermOptions.IsList, 56);
      NonTerminal Terms_63 = new NonTerminal("NT1", typeof(AstNode), "\b", TermOptions.None, 63);
      NonTerminal Terms_64 = new NonTerminal("ExprList?", typeof(AstNode), "\b", TermOptions.None, 64);
      NonTerminal Terms_12 = new NonTerminal("TypeConstructor", typeof(Scripting.SSharp.Parser.Ast.ScriptTypeConstructor), "TypeConstructor\b", TermOptions.None, 12);
      NonTerminal Terms_25 = new NonTerminal("NewArrStmt", typeof(Scripting.SSharp.Parser.Ast.ScriptNewArrStmt), "NewArrStmt\b", TermOptions.None, 25);
      NonTerminal Terms_11 = new NonTerminal("TypeExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptTypeExpr), "TypeExpr\b", TermOptions.None, 11);
      NonTerminal Terms_18 = new NonTerminal("ArrayConstructor", typeof(Scripting.SSharp.Parser.Ast.ScriptArrayConstructor), "ArrayConstructor\b", TermOptions.None, 18);
      NonTerminal Terms_19 = new NonTerminal("MObjectConstructor", typeof(Scripting.SSharp.Parser.Ast.ScriptMObject), "MObjectConstructor\b", TermOptions.None, 19);
      NonTerminal Terms_71 = new NonTerminal("Expr?", typeof(AstNode), "\b", TermOptions.None, 71);
      NonTerminal Terms_7 = new NonTerminal("MetaExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptMetaExpr), "MetaExpr\b", TermOptions.None, 7);
      NonTerminal Terms_66 = new NonTerminal("GlobalList?", typeof(AstNode), "\b", TermOptions.None, 66);
      NonTerminal Terms_31 = new NonTerminal("IfStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptIfStatement), "IfStatement\b", TermOptions.None, 31);
      NonTerminal Terms_29 = new NonTerminal("Condition", typeof(Scripting.SSharp.Parser.Ast.ScriptCondition), "Condition\b", TermOptions.None, 29);
      NonTerminal Terms_22 = new NonTerminal("TypeList", typeof(Scripting.SSharp.Parser.Ast.ScriptTypeExprList), "TypeList\b", TermOptions.IsList, 22);
      NonTerminal Terms_62 = new NonTerminal("GenericsPostfix?", typeof(AstNode), "\b", TermOptions.None, 62);
      NonTerminal Terms_20 = new NonTerminal("MObjectPart", typeof(Scripting.SSharp.Parser.Ast.ScriptMObjectPart), "MObjectPart\b", TermOptions.None, 20);
      NonTerminal Terms_5 = new NonTerminal("TypeConvertExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptTypeConvertExpr), "TypeConvertExpr\b", TermOptions.None, 5);
      NonTerminal Terms_67 = new NonTerminal("FuncContract?", typeof(AstNode), "\b", TermOptions.None, 67);
      NonTerminal Terms_75 = new NonTerminal("GlobalList?", typeof(AstNode), "\b", TermOptions.None, 75);
      NonTerminal Terms_40 = new NonTerminal("UsingStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptUsingStatement), "UsingStatement\b", TermOptions.None, 40);
      NonTerminal Terms_57 = new NonTerminal("SwitchCaseStatement*", typeof(AstNode), "SwitchCaseStatement*\b", TermOptions.IsList, 57);
      NonTerminal Terms_65 = new NonTerminal("NT2", typeof(AstNode), "\b", TermOptions.None, 65);
      NonTerminal Terms_27 = new NonTerminal("GenericsPostfix", typeof(Scripting.SSharp.Parser.Ast.ScriptGenericsPostfix), "GenericsPostfix\b", TermOptions.None, 27);
      NonTerminal Terms_14 = new NonTerminal("ArrayResolution", typeof(Scripting.SSharp.Parser.Ast.ScriptArrayResolution), "ArrayResolution\b", TermOptions.None, 14);
      NonTerminal Terms_13 = new NonTerminal("FunctionCall", typeof(Scripting.SSharp.Parser.Ast.ScriptFunctionCall), "FunctionCall\b", TermOptions.None, 13);
      NonTerminal Terms_61 = new NonTerminal("NT0", typeof(AstNode), "\b", TermOptions.None, 61);
      NonTerminal Terms_76 = new NonTerminal("FuncContract?", typeof(AstNode), "\b", TermOptions.None, 76);
      NonTerminal Terms_74 = new NonTerminal("SwitchDefaultStatement?", typeof(AstNode), "\b", TermOptions.None, 74);
      NonTerminal Terms_8 = new NonTerminal("FuncDefExpr", typeof(Scripting.SSharp.Parser.Ast.ScriptFunctionDefinition), "FuncDefExpr\b", TermOptions.None, 8);
      NonTerminal Terms_34 = new NonTerminal("ForEachStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptForEachStatement), "ForEachStatement\b", TermOptions.None, 34);
      NonTerminal Terms_36 = new NonTerminal("SwitchStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptSwitchRootStatement), "SwitchStatement\b", TermOptions.None, 36);
      NonTerminal Terms_37 = new NonTerminal("SwitchStatements", typeof(Scripting.SSharp.Parser.Ast.ScriptSwitchStatement), "SwitchStatements\b", TermOptions.None, 37);
      NonTerminal Terms_68 = new NonTerminal("ExprList?", typeof(AstNode), "\b", TermOptions.None, 68);
      NonTerminal Terms_28 = new NonTerminal("GlobalList", typeof(Scripting.SSharp.Parser.Ast.ScriptGlobalList), "GlobalList\b", TermOptions.None, 28);
      NonTerminal Terms_49 = new NonTerminal("FuncDef", typeof(Scripting.SSharp.Parser.Ast.ScriptFunctionDefinition), "FuncDef\b", TermOptions.None, 49);
      NonTerminal Terms_33 = new NonTerminal("ForStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptForStatement), "ForStatement\b", TermOptions.None, 33);
      NonTerminal Terms_39 = new NonTerminal("SwitchDefaultStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptSwitchDefaultStatement), "SwitchDefaultStatement\b", TermOptions.None, 39);
      NonTerminal Terms_41 = new NonTerminal("TryCatchFinallyStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptTryCatchFinallyStatement), "TryCatchFinallyStatement\b", TermOptions.None, 41);
      NonTerminal Terms_69 = new NonTerminal("ExprList?", typeof(AstNode), "\b", TermOptions.None, 69);
      NonTerminal Terms_52 = new NonTerminal("Pre Conditions", typeof(Scripting.SSharp.Parser.Ast.ScriptFuncContractPre), "Pre Conditions\b", TermOptions.None, 52);
      NonTerminal Terms_38 = new NonTerminal("SwitchCaseStatement", typeof(Scripting.SSharp.Parser.Ast.ScriptSwitchCaseStatement), "SwitchCaseStatement\b", TermOptions.None, 38);
      NonTerminal Terms_70 = new NonTerminal("ExprList?", typeof(AstNode), "\b", TermOptions.None, 70);
      NonTerminal Terms_53 = new NonTerminal("Post Conditions", typeof(Scripting.SSharp.Parser.Ast.ScriptFuncContractPost), "Post Conditions\b", TermOptions.None, 53);
      NonTerminal Terms_50 = new NonTerminal("FuncContract", typeof(Scripting.SSharp.Parser.Ast.ScriptFuncContract), "FuncContract\b", TermOptions.None, 50);
      NonTerminal Terms_54 = new NonTerminal("Invariant Conditions", typeof(Scripting.SSharp.Parser.Ast.ScriptFuncContractInv), "Invariant Conditions\b", TermOptions.None, 54);
      ParserState ts = null;
      ActionsRecord fd;
      ts = States[0];
      ts.Actions.Add("Prog'\b", new ActionRecord(ParserActionType.Shift, States[1], null, 0));
      ts.Actions.Add("Prog\b", new ActionRecord(ParserActionType.Shift, States[1], null, 0));
      ts.Actions.Add("Elements\b", new ActionRecord(ParserActionType.Shift, States[2], null, 0));
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts = States[1];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_59, 1));
      ts = States[2];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Shift, States[3], null, 0));
      ts.Actions.Add("Element\b", new ActionRecord(ParserActionType.Shift, States[4], null, 0));
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[5], null, 0));
      ts.Actions.Add("FuncDef\b", new ActionRecord(ParserActionType.Shift, States[6], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[18], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[3];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_46, 2));
      ts = States[4];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 2));
      ts = States[5];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts = States[6];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_47, 1));
      ts = States[7];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[8];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[9];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[10];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[11];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[12];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[13];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[14];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[15];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[16];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[17];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_30, 1));
      ts = States[18];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[66], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[67], null, 0));
      ts = States[19];
      ts.Actions.Add("Condition\b", new ActionRecord(ParserActionType.Shift, States[68], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[69], null, 0));
      ts = States[20];
      ts.Actions.Add("Condition\b", new ActionRecord(ParserActionType.Shift, States[70], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[69], null, 0));
      ts = States[21];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[71], null, 0));
      ts = States[22];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[72], null, 0));
      ts = States[23];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[73], null, 0));
      ts = States[24];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[74], null, 0));
      ts = States[25];
      ts.Actions.Add("Statements(Compound)\b", new ActionRecord(ParserActionType.Shift, States[75], null, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts = States[26];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[76], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[27];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[79], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[28];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[96], null, 0));
      ts = States[29];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[97], null, 0));
      ts = States[30];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[98], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[31];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[100], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[32];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[33];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[34];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[35];
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Shift, States[101], null, 0));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Shift, States[102], null, 0));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Shift, States[103], null, 0));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Shift, States[104], null, 0));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Shift, States[105], null, 0));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Shift, States[106], null, 0));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Shift, States[107], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[36];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[37];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[38];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[39];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[40];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[41];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[42];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[43];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[44];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[45];
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Shift, States[108], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_0, 1));
      ts = States[46];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts = States[47];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts = States[48];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts = States[49];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts = States[50];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_1, 1));
      ts = States[51];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 1));
      ts = States[52];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[109], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[53];
      ts.Actions.Add("*\b", new ActionRecord(ParserActionType.Shift, States[110], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts = States[54];
      ts.Actions.Add("TypeConstructor\b", new ActionRecord(ParserActionType.Shift, States[111], null, 0));
      ts.Actions.Add("TypeExpr\b", new ActionRecord(ParserActionType.Shift, States[112], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[113], null, 0));
      ts = States[55];
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[114], null, 0));
      ts.Actions.Add("MObjectPart\b", new ActionRecord(ParserActionType.Shift, States[115], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[117], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[56];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[118], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[57];
      ts.Actions.Add("Elements\b", new ActionRecord(ParserActionType.Shift, States[119], null, 0));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_48, 0));
      ts = States[58];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts = States[59];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[121], null, 0));
      ts = States[60];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts = States[61];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts = States[62];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts = States[63];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_16, 1));
      ts = States[64];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_72, 1));
      ts = States[65];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_72, 1));
      ts = States[66];
      ts.Actions.Add("ParamaterList\b", new ActionRecord(ParserActionType.Shift, States[122], null, 0));
      ts.Actions.Add("idn+\b", new ActionRecord(ParserActionType.Shift, States[123], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[124], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_51, 0));
      ts = States[67];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[125], null, 0));
      ts = States[68];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[126], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[69];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[127], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[70];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[128], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[71];
      ts.Actions.Add("OptionalExpression\b", new ActionRecord(ParserActionType.Shift, States[129], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[130], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_35, 0));
      ts = States[72];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[131], null, 0));
      ts = States[73];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[132], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[74];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[133], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[75];
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Shift, States[134], null, 0));
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[135], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[76];
      ts.Actions.Add("catch", new ActionRecord(ParserActionType.Shift, States[136], null, 0));
      ts = States[77];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[137], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[78];
      ts.Actions.Add("TypeExpr\b", new ActionRecord(ParserActionType.Shift, States[138], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[113], null, 0));
      ts = States[79];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_43, 2));
      ts = States[80];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[81];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[82];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[83];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[84];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[85];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[86];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[87];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[88];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[89];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[90];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[91];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[92];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[93];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[94];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[95];
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_15, 1));
      ts = States[96];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts = States[97];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 2));
      ts = States[98];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[139], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[99];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[66], null, 0));
      ts = States[100];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[140], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[101];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[141], null, 0));
      ts = States[102];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[142], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[103];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts = States[104];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 2));
      ts = States[105];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[143], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[106];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[144], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[107];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[145], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[108];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[146], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[109];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_3, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_3, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_3, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_3, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_3, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_3, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_3, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_3, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_3, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_3, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_3, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_3, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_3, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_3, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_3, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_3, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_3, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_3, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_3, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_3, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_3, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_3, 2));
      ts = States[110];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[147], null, 0));
      ts.Actions.Add("GenericsPostfix\b", new ActionRecord(ParserActionType.Shift, States[148], null, 0));
      ts.Actions.Add("ArrayResolution\b", new ActionRecord(ParserActionType.Shift, States[149], null, 0));
      ts.Actions.Add("FunctionCall\b", new ActionRecord(ParserActionType.Shift, States[150], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Shift, States[151], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[152], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[153], null, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 2));
      ts = States[111];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_24, 2));
      ts = States[112];
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Shift, States[154], null, 0));
      ts.Actions.Add("FunctionCall\b", new ActionRecord(ParserActionType.Shift, States[155], null, 0));
      ts.Actions.Add("ArrayResolution\b", new ActionRecord(ParserActionType.Shift, States[156], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[153], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[152], null, 0));
      ts = States[113];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[157], null, 0));
      ts.Actions.Add("GenericsPostfix\b", new ActionRecord(ParserActionType.Shift, States[158], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Shift, States[151], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 0));
      ts = States[114];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Shift, States[160], null, 0));
      ts = States[115];
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Shift, States[161], Terms_21, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[162], Terms_21, 1));
      ts = States[116];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 1));
      ts = States[117];
      ts.Actions.Add("*\b", new ActionRecord(ParserActionType.Shift, States[110], null, 0));
      ts.Actions.Add("->", new ActionRecord(ParserActionType.Shift, States[163], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 0));
      ts = States[118];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[164], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[119];
      ts.Actions.Add("Element\b", new ActionRecord(ParserActionType.Shift, States[4], null, 0));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Shift, States[165], null, 0));
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[5], null, 0));
      ts.Actions.Add("FuncDef\b", new ActionRecord(ParserActionType.Shift, States[6], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[18], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[120];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_9, 2));
      ts = States[121];
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_10, 2));
      ts = States[122];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[166], null, 0));
      ts = States[123];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[167], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_51, 1));
      ts = States[124];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_58, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_58, 1));
      ts = States[125];
      ts.Actions.Add("ParamaterList\b", new ActionRecord(ParserActionType.Shift, States[168], null, 0));
      ts.Actions.Add("idn+\b", new ActionRecord(ParserActionType.Shift, States[123], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[124], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_51, 0));
      ts = States[126];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[169], null, 0));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Shift, States[170], Terms_73, 0));
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 0));
      ts = States[127];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[171], null, 0));
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[128];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_32, 3));
      ts = States[129];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[172], null, 0));
      ts = States[130];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_35, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_35, 1));
      ts = States[131];
      ts.Actions.Add("in", new ActionRecord(ParserActionType.Shift, States[173], null, 0));
      ts = States[132];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[174], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[133];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[175], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[134];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("catch", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("finally", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_44, 3));
      ts = States[135];
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 2));
      ts = States[136];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[176], null, 0));
      ts = States[137];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_2, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_2, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_2, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_2, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_2, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_2, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_2, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_2, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_2, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_2, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_2, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_2, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_2, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_2, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_2, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_2, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_2, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_2, 3));
      ts = States[138];
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Shift, States[154], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_6, 3));
      ts = States[139];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts = States[140];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_42, 3));
      ts = States[141];
      ts.Actions.Add("*\b", new ActionRecord(ParserActionType.Shift, States[177], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 0));
      ts = States[142];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_4, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_4, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_4, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_4, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_4, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_4, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_4, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_4, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_4, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_4, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_4, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_4, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_4, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_4, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_4, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_4, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_4, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts = States[143];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_4, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_4, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_4, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_4, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_4, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_4, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_4, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_4, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_4, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_4, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_4, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_4, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_4, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_4, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_4, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_4, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_4, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts = States[144];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_4, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_4, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_4, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_4, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_4, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_4, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_4, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_4, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_4, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_4, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_4, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_4, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_4, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_4, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_4, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_4, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_4, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts = States[145];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_4, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_4, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_4, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_4, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_4, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_4, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_4, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_4, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_4, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_4, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_4, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_4, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_4, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_4, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_4, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_4, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_4, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts = States[146];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_4, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_4, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_4, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_4, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_4, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_4, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_4, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_4, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_4, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_4, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_4, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_4, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_4, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_4, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_4, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_4, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_4, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_4, 3));
      ts = States[147];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_55, 2));
      ts = States[148];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts = States[149];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts = States[150];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_63, 1));
      ts = States[151];
      ts.Actions.Add("TypeList\b", new ActionRecord(ParserActionType.Shift, States[178], null, 0));
      ts.Actions.Add("TypeExpr\b", new ActionRecord(ParserActionType.Shift, States[179], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[113], null, 0));
      ts = States[152];
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[180], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[153];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[181], null, 0));
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[182], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_64, 0));
      ts = States[154];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[183], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[184], null, 0));
      ts = States[155];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_12, 2));
      ts = States[156];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_25, 3));
      ts = States[157];
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 2));
      ts = States[158];
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_60, 1));
      ts = States[159];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[185], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[160];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_18, 3));
      ts = States[161];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_19, 3));
      ts = States[162];
      ts.Actions.Add("MObjectPart\b", new ActionRecord(ParserActionType.Shift, States[186], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[187], null, 0));
      ts = States[163];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[188], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[164];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[189], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[190], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[61], Terms_71, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 0));
      ts = States[165];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_7, 3));
      ts = States[166];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[191], null, 0));
      ts.Actions.Add("GlobalList\b", new ActionRecord(ParserActionType.Shift, States[192], null, 0));
      ts.Actions.Add("global", new ActionRecord(ParserActionType.Shift, States[193], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_66, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_66, 0));
      ts = States[167];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[194], null, 0));
      ts = States[168];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[195], null, 0));
      ts = States[169];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_31, 4));
      ts = States[170];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[196], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[171];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_29, 3));
      ts = States[172];
      ts.Actions.Add("OptionalExpression\b", new ActionRecord(ParserActionType.Shift, States[197], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[130], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_35, 0));
      ts = States[173];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[198], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[174];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[199], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[175];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[200], null, 0));
      ts = States[176];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[201], null, 0));
      ts = States[177];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[202], null, 0));
      ts.Actions.Add("GenericsPostfix\b", new ActionRecord(ParserActionType.Shift, States[203], null, 0));
      ts.Actions.Add("ArrayResolution\b", new ActionRecord(ParserActionType.Shift, States[204], null, 0));
      ts.Actions.Add("FunctionCall\b", new ActionRecord(ParserActionType.Shift, States[205], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Shift, States[151], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[152], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[153], null, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_26, 4));
      ts = States[178];
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Shift, States[206], null, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[207], null, 0));
      ts = States[179];
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Shift, States[154], null, 0));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_22, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_22, 1));
      ts = States[180];
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Shift, States[208], null, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts = States[181];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[209], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts = States[182];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_64, 1));
      ts = States[183];
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_11, 3));
      ts = States[184];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[210], null, 0));
      ts.Actions.Add("GenericsPostfix\b", new ActionRecord(ParserActionType.Shift, States[211], null, 0));
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Shift, States[151], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 0));
      ts = States[185];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_23, 3));
      ts = States[186];
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_21, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_21, 3));
      ts = States[187];
      ts.Actions.Add("->", new ActionRecord(ParserActionType.Shift, States[163], null, 0));
      ts = States[188];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_20, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_20, 3));
      ts = States[189];
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_5, 4));
      ts = States[190];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Operator, States[78], Terms_71, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Operator, States[80], Terms_71, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Operator, States[81], Terms_71, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Operator, States[82], Terms_71, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Operator, States[83], Terms_71, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Operator, States[84], Terms_71, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Operator, States[85], Terms_71, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Operator, States[86], Terms_71, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Operator, States[87], Terms_71, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Operator, States[88], Terms_71, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Operator, States[89], Terms_71, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Operator, States[90], Terms_71, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Operator, States[91], Terms_71, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Operator, States[92], Terms_71, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Operator, States[93], Terms_71, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Operator, States[94], Terms_71, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Operator, States[95], Terms_71, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_71, 1));
      ts = States[191];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[212], null, 0));
      ts.Actions.Add("FuncContract\b", new ActionRecord(ParserActionType.Shift, States[213], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[214], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_67, 0));
      ts = States[192];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_66, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_66, 1));
      ts = States[193];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[215], null, 0));
      ts = States[194];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_58, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_58, 3));
      ts = States[195];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[216], null, 0));
      ts.Actions.Add("GlobalList\b", new ActionRecord(ParserActionType.Shift, States[217], null, 0));
      ts.Actions.Add("global", new ActionRecord(ParserActionType.Shift, States[193], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_75, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_75, 0));
      ts = States[196];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_73, 2));
      ts = States[197];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[218], null, 0));
      ts = States[198];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[219], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[199];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_40, 5));
      ts = States[200];
      ts.Actions.Add("SwitchStatements\b", new ActionRecord(ParserActionType.Shift, States[220], null, 0));
      ts.Actions.Add("SwitchCaseStatement*\b", new ActionRecord(ParserActionType.Shift, States[221], null, 0));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 0));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 0));
      ts = States[201];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[222], null, 0));
      ts = States[202];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_56, 2));
      ts = States[203];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts = States[204];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts = States[205];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_65, 1));
      ts = States[206];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_27, 3));
      ts = States[207];
      ts.Actions.Add("TypeExpr\b", new ActionRecord(ParserActionType.Shift, States[223], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[113], null, 0));
      ts = States[208];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_14, 3));
      ts = States[209];
      ts.Actions.Add("<|", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("++", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("--", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(":=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("+=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("-=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_13, 3));
      ts = States[210];
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_61, 2));
      ts = States[211];
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_62, 1));
      ts = States[212];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[224], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[213];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_67, 1));
      ts = States[214];
      ts.Actions.Add("Pre Conditions\b", new ActionRecord(ParserActionType.Shift, States[225], null, 0));
      ts.Actions.Add("pre", new ActionRecord(ParserActionType.Shift, States[226], null, 0));
      ts = States[215];
      ts.Actions.Add("ParamaterList\b", new ActionRecord(ParserActionType.Shift, States[227], null, 0));
      ts.Actions.Add("idn+\b", new ActionRecord(ParserActionType.Shift, States[123], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[124], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_51, 0));
      ts = States[216];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[228], null, 0));
      ts.Actions.Add("FuncContract\b", new ActionRecord(ParserActionType.Shift, States[229], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[214], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_76, 0));
      ts = States[217];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_75, 1));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_75, 1));
      ts = States[218];
      ts.Actions.Add("OptionalExpression\b", new ActionRecord(ParserActionType.Shift, States[230], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[130], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_35, 0));
      ts = States[219];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[231], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[220];
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Shift, States[232], null, 0));
      ts = States[221];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[233], null, 0));
      ts.Actions.Add("SwitchCaseStatement\b", new ActionRecord(ParserActionType.Shift, States[234], null, 0));
      ts.Actions.Add("SwitchDefaultStatement\b", new ActionRecord(ParserActionType.Shift, States[235], null, 0));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Shift, States[236], null, 0));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Shift, States[237], null, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_74, 0));
      ts = States[222];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[238], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[223];
      ts.Actions.Add(".", new ActionRecord(ParserActionType.Shift, States[154], null, 0));
      ts.Actions.Add("|>", new ActionRecord(ParserActionType.Reduce, null, Terms_22, 3));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_22, 3));
      ts = States[224];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Reduce, null, Terms_8, 7));
      ts = States[225];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[239], null, 0));
      ts = States[226];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[240], null, 0));
      ts = States[227];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[241], null, 0));
      ts = States[228];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[242], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[229];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_76, 1));
      ts = States[230];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[243], null, 0));
      ts = States[231];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_34, 7));
      ts = States[232];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_36, 7));
      ts = States[233];
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_37, 2));
      ts = States[234];
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 2));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 2));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_57, 2));
      ts = States[235];
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_74, 1));
      ts = States[236];
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[244], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[237];
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Shift, States[245], null, 0));
      ts = States[238];
      ts.Actions.Add("finally", new ActionRecord(ParserActionType.Shift, States[246], null, 0));
      ts = States[239];
      ts.Actions.Add("Post Conditions\b", new ActionRecord(ParserActionType.Shift, States[247], null, 0));
      ts.Actions.Add("post", new ActionRecord(ParserActionType.Shift, States[248], null, 0));
      ts = States[240];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[249], null, 0));
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[250], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_68, 0));
      ts = States[241];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_28, 4));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_28, 4));
      ts = States[242];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_49, 8));
      ts = States[243];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[251], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts = States[244];
      ts.Actions.Add("BinOp\b", new ActionRecord(ParserActionType.Shift, States[77], null, 0));
      ts.Actions.Add("is", new ActionRecord(ParserActionType.Shift, States[78], null, 0));
      ts.Actions.Add(":", new ActionRecord(ParserActionType.Shift, States[252], null, 0));
      ts.Actions.Add("+", new ActionRecord(ParserActionType.Shift, States[80], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[81], null, 0));
      ts.Actions.Add("*", new ActionRecord(ParserActionType.Shift, States[82], null, 0));
      ts.Actions.Add("/", new ActionRecord(ParserActionType.Shift, States[83], null, 0));
      ts.Actions.Add("%", new ActionRecord(ParserActionType.Shift, States[84], null, 0));
      ts.Actions.Add("^", new ActionRecord(ParserActionType.Shift, States[85], null, 0));
      ts.Actions.Add("&", new ActionRecord(ParserActionType.Shift, States[86], null, 0));
      ts.Actions.Add("|", new ActionRecord(ParserActionType.Shift, States[87], null, 0));
      ts.Actions.Add("&&", new ActionRecord(ParserActionType.Shift, States[88], null, 0));
      ts.Actions.Add("||", new ActionRecord(ParserActionType.Shift, States[89], null, 0));
      ts.Actions.Add("==", new ActionRecord(ParserActionType.Shift, States[90], null, 0));
      ts.Actions.Add("!=", new ActionRecord(ParserActionType.Shift, States[91], null, 0));
      ts.Actions.Add(">", new ActionRecord(ParserActionType.Shift, States[92], null, 0));
      ts.Actions.Add("<", new ActionRecord(ParserActionType.Shift, States[93], null, 0));
      ts.Actions.Add(">=", new ActionRecord(ParserActionType.Shift, States[94], null, 0));
      ts.Actions.Add("<=", new ActionRecord(ParserActionType.Shift, States[95], null, 0));
      ts = States[245];
      ts.Actions.Add("Statements(Compound)\b", new ActionRecord(ParserActionType.Shift, States[253], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts = States[246];
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[254], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts = States[247];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[255], null, 0));
      ts = States[248];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[256], null, 0));
      ts = States[249];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[257], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts = States[250];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_68, 1));
      ts = States[251];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_33, 9));
      ts = States[252];
      ts.Actions.Add("Statements(Compound)\b", new ActionRecord(ParserActionType.Shift, States[258], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_45, 0));
      ts = States[253];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[135], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_39, 3));
      ts = States[254];
      ts.Actions.Add("EOF\b", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("else", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("!>", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_41, 9));
      ts = States[255];
      ts.Actions.Add("Invariant Conditions\b", new ActionRecord(ParserActionType.Shift, States[259], null, 0));
      ts.Actions.Add("invariant", new ActionRecord(ParserActionType.Shift, States[260], null, 0));
      ts = States[256];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[261], null, 0));
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[262], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_69, 0));
      ts = States[257];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_52, 4));
      ts = States[258];
      ts.Actions.Add("Statement\b", new ActionRecord(ParserActionType.Shift, States[135], null, 0));
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[7], null, 0));
      ts.Actions.Add("IfStatement\b", new ActionRecord(ParserActionType.Shift, States[8], null, 0));
      ts.Actions.Add("WhileStatement\b", new ActionRecord(ParserActionType.Shift, States[9], null, 0));
      ts.Actions.Add("ForStatement\b", new ActionRecord(ParserActionType.Shift, States[10], null, 0));
      ts.Actions.Add("ForEachStatement\b", new ActionRecord(ParserActionType.Shift, States[11], null, 0));
      ts.Actions.Add("UsingStatement\b", new ActionRecord(ParserActionType.Shift, States[12], null, 0));
      ts.Actions.Add("SwitchStatement\b", new ActionRecord(ParserActionType.Shift, States[13], null, 0));
      ts.Actions.Add("BlockStatement\b", new ActionRecord(ParserActionType.Shift, States[14], null, 0));
      ts.Actions.Add("TryCatchFinallyStatement\b", new ActionRecord(ParserActionType.Shift, States[15], null, 0));
      ts.Actions.Add("ExprStatement\b", new ActionRecord(ParserActionType.Shift, States[16], null, 0));
      ts.Actions.Add("FlowControl\b", new ActionRecord(ParserActionType.Shift, States[17], null, 0));
      ts.Actions.Add("if", new ActionRecord(ParserActionType.Shift, States[19], null, 0));
      ts.Actions.Add("while", new ActionRecord(ParserActionType.Shift, States[20], null, 0));
      ts.Actions.Add("for", new ActionRecord(ParserActionType.Shift, States[21], null, 0));
      ts.Actions.Add("foreach", new ActionRecord(ParserActionType.Shift, States[22], null, 0));
      ts.Actions.Add("using", new ActionRecord(ParserActionType.Shift, States[23], null, 0));
      ts.Actions.Add("switch", new ActionRecord(ParserActionType.Shift, States[24], null, 0));
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Shift, States[25], null, 0));
      ts.Actions.Add("try", new ActionRecord(ParserActionType.Shift, States[26], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[27], null, 0));
      ts.Actions.Add("break", new ActionRecord(ParserActionType.Shift, States[28], null, 0));
      ts.Actions.Add("continue", new ActionRecord(ParserActionType.Shift, States[29], null, 0));
      ts.Actions.Add("return", new ActionRecord(ParserActionType.Shift, States[30], null, 0));
      ts.Actions.Add("throw", new ActionRecord(ParserActionType.Shift, States[31], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[58], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add("default", new ActionRecord(ParserActionType.Reduce, null, Terms_38, 4));
      ts.Actions.Add("case", new ActionRecord(ParserActionType.Reduce, null, Terms_38, 4));
      ts.Actions.Add("}", new ActionRecord(ParserActionType.Reduce, null, Terms_38, 4));
      ts = States[259];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Shift, States[263], null, 0));
      ts = States[260];
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[264], null, 0));
      ts = States[261];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[265], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts = States[262];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_69, 1));
      ts = States[263];
      ts.Actions.Add("]", new ActionRecord(ParserActionType.Shift, States[266], null, 0));
      ts = States[264];
      ts.Actions.Add("\b", new ActionRecord(ParserActionType.Shift, States[267], null, 0));
      ts.Actions.Add("ExprList\b", new ActionRecord(ParserActionType.Shift, States[268], null, 0));
      ts.Actions.Add("Expr\b", new ActionRecord(ParserActionType.Shift, States[116], null, 0));
      ts.Actions.Add("ConstExpr\b", new ActionRecord(ParserActionType.Shift, States[32], null, 0));
      ts.Actions.Add("BinExpr\b", new ActionRecord(ParserActionType.Shift, States[33], null, 0));
      ts.Actions.Add("UnaryExpr\b", new ActionRecord(ParserActionType.Shift, States[34], null, 0));
      ts.Actions.Add("QualifiedName\b", new ActionRecord(ParserActionType.Shift, States[35], null, 0));
      ts.Actions.Add("AssignExpr\b", new ActionRecord(ParserActionType.Shift, States[36], null, 0));
      ts.Actions.Add("NewStmt\b", new ActionRecord(ParserActionType.Shift, States[37], null, 0));
      ts.Actions.Add("FuncDefExpr\b", new ActionRecord(ParserActionType.Shift, States[38], null, 0));
      ts.Actions.Add("NewArrStmt\b", new ActionRecord(ParserActionType.Shift, States[39], null, 0));
      ts.Actions.Add("ArrayConstructor\b", new ActionRecord(ParserActionType.Shift, States[40], null, 0));
      ts.Actions.Add("MObjectConstructor\b", new ActionRecord(ParserActionType.Shift, States[41], null, 0));
      ts.Actions.Add("TypeConvertExpr\b", new ActionRecord(ParserActionType.Shift, States[42], null, 0));
      ts.Actions.Add("MetaExpr\b", new ActionRecord(ParserActionType.Shift, States[43], null, 0));
      ts.Actions.Add("RefExpr\b", new ActionRecord(ParserActionType.Shift, States[44], null, 0));
      ts.Actions.Add("VarExpr\b", new ActionRecord(ParserActionType.Shift, States[45], null, 0));
      ts.Actions.Add("true", new ActionRecord(ParserActionType.Shift, States[46], null, 0));
      ts.Actions.Add("false", new ActionRecord(ParserActionType.Shift, States[47], null, 0));
      ts.Actions.Add("null", new ActionRecord(ParserActionType.Shift, States[48], null, 0));
      ts.Actions.Add("string\b", new ActionRecord(ParserActionType.Shift, States[49], null, 0));
      ts.Actions.Add("number\b", new ActionRecord(ParserActionType.Shift, States[50], null, 0));
      ts.Actions.Add("IsExpr\b", new ActionRecord(ParserActionType.Shift, States[51], null, 0));
      ts.Actions.Add("LUnOp\b", new ActionRecord(ParserActionType.Shift, States[52], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[53], null, 0));
      ts.Actions.Add("new", new ActionRecord(ParserActionType.Shift, States[54], null, 0));
      ts.Actions.Add("function", new ActionRecord(ParserActionType.Shift, States[99], null, 0));
      ts.Actions.Add("[", new ActionRecord(ParserActionType.Shift, States[55], null, 0));
      ts.Actions.Add("(", new ActionRecord(ParserActionType.Shift, States[56], null, 0));
      ts.Actions.Add("<!", new ActionRecord(ParserActionType.Shift, States[57], null, 0));
      ts.Actions.Add("var", new ActionRecord(ParserActionType.Shift, States[59], null, 0));
      ts.Actions.Add("~", new ActionRecord(ParserActionType.Shift, States[60], null, 0));
      ts.Actions.Add("-", new ActionRecord(ParserActionType.Shift, States[61], null, 0));
      ts.Actions.Add("!", new ActionRecord(ParserActionType.Shift, States[62], null, 0));
      ts.Actions.Add("$", new ActionRecord(ParserActionType.Shift, States[63], null, 0));
      ts.Actions.Add("ref", new ActionRecord(ParserActionType.Shift, States[64], null, 0));
      ts.Actions.Add("out", new ActionRecord(ParserActionType.Shift, States[65], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_70, 0));
      ts = States[265];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_53, 4));
      ts = States[266];
      ts.Actions.Add("{", new ActionRecord(ParserActionType.Reduce, null, Terms_50, 8));
      ts = States[267];
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Shift, States[269], null, 0));
      ts.Actions.Add("idn\b", new ActionRecord(ParserActionType.Shift, States[120], null, 0));
      ts = States[268];
      ts.Actions.Add(",", new ActionRecord(ParserActionType.Shift, States[159], null, 0));
      ts.Actions.Add(")", new ActionRecord(ParserActionType.Reduce, null, Terms_70, 1));
      ts = States[269];
      ts.Actions.Add(";", new ActionRecord(ParserActionType.Reduce, null, Terms_54, 4));
      InitialState = States[0];
      FinalState = States[1];
      TerminalList tl;
      NumberLiteral n = new NumberLiteral();
      IdentifierTerminal v = new IdentifierTerminal();
      ITerminal s = new StringLiteral();
      ITerminal Comment = new CommentTerminal("Comment", "/*", "*/");
      ITerminal LineComment = new CommentTerminal("LineComment", "//", "\n");

      tl = new TerminalList() { SymbolTerminal.GetSymbol("-="), SymbolTerminal.GetSymbol("->"), SymbolTerminal.GetSymbol("--"), SymbolTerminal.GetSymbol("-"), };
      Scanner.TerminalsLookup.Add((char)45, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("!>"), SymbolTerminal.GetSymbol("!="), SymbolTerminal.GetSymbol("!"), };
      Scanner.TerminalsLookup.Add((char)33, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("$"), };
      Scanner.TerminalsLookup.Add((char)36, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("%"), };
      Scanner.TerminalsLookup.Add((char)37, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("&&"), SymbolTerminal.GetSymbol("&"), };
      Scanner.TerminalsLookup.Add((char)38, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("("), };
      Scanner.TerminalsLookup.Add((char)40, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol(")"), };
      Scanner.TerminalsLookup.Add((char)41, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("*"), };
      Scanner.TerminalsLookup.Add((char)42, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol(","), };
      Scanner.TerminalsLookup.Add((char)44, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("."), };
      Scanner.TerminalsLookup.Add((char)46, tl);
      tl = new TerminalList() { LineComment, Comment, SymbolTerminal.GetSymbol("/"), };
      Scanner.TerminalsLookup.Add((char)47, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol(":="), SymbolTerminal.GetSymbol(":"), };
      Scanner.TerminalsLookup.Add((char)58, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol(";"), };
      Scanner.TerminalsLookup.Add((char)59, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("["), };
      Scanner.TerminalsLookup.Add((char)91, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("]"), };
      Scanner.TerminalsLookup.Add((char)93, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("^"), };
      Scanner.TerminalsLookup.Add((char)94, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("{"), };
      Scanner.TerminalsLookup.Add((char)123, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("|>"), SymbolTerminal.GetSymbol("||"), SymbolTerminal.GetSymbol("|"), };
      Scanner.TerminalsLookup.Add((char)124, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("}"), };
      Scanner.TerminalsLookup.Add((char)125, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("~"), };
      Scanner.TerminalsLookup.Add((char)126, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("+="), SymbolTerminal.GetSymbol("++"), SymbolTerminal.GetSymbol("+"), };
      Scanner.TerminalsLookup.Add((char)43, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("<|"), SymbolTerminal.GetSymbol("<="), SymbolTerminal.GetSymbol("<!"), SymbolTerminal.GetSymbol("<"), };
      Scanner.TerminalsLookup.Add((char)60, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol("=="), SymbolTerminal.GetSymbol("="), };
      Scanner.TerminalsLookup.Add((char)61, tl);
      tl = new TerminalList() { SymbolTerminal.GetSymbol(">="), SymbolTerminal.GetSymbol(">"), };
      Scanner.TerminalsLookup.Add((char)62, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("break"), };
      Scanner.TerminalsLookup.Add((char)98, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("continue"), SymbolTerminal.GetSymbol("catch"), SymbolTerminal.GetSymbol("case"), };
      Scanner.TerminalsLookup.Add((char)99, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("default"), };
      Scanner.TerminalsLookup.Add((char)100, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("else"), };
      Scanner.TerminalsLookup.Add((char)101, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("function"), SymbolTerminal.GetSymbol("foreach"), SymbolTerminal.GetSymbol("finally"), SymbolTerminal.GetSymbol("false"), SymbolTerminal.GetSymbol("for"), };
      Scanner.TerminalsLookup.Add((char)102, tl);
      tl = new TerminalList() { v, v, SymbolTerminal.GetSymbol("global"), };
      Scanner.TerminalsLookup.Add((char)103, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)65, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)66, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)67, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)68, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)69, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)70, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)71, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)72, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)73, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)74, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)75, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)76, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)77, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)78, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)79, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)80, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)81, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)82, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)83, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)84, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)85, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)86, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)87, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)88, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)89, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)90, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)97, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)104, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("invariant"), SymbolTerminal.GetSymbol("is"), SymbolTerminal.GetSymbol("if"), SymbolTerminal.GetSymbol("in"), };
      Scanner.TerminalsLookup.Add((char)105, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)106, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)107, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)108, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)109, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("null"), SymbolTerminal.GetSymbol("new"), };
      Scanner.TerminalsLookup.Add((char)110, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("out"), };
      Scanner.TerminalsLookup.Add((char)111, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("post"), SymbolTerminal.GetSymbol("pre"), };
      Scanner.TerminalsLookup.Add((char)112, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)113, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("return"), SymbolTerminal.GetSymbol("ref"), };
      Scanner.TerminalsLookup.Add((char)114, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("switch"), };
      Scanner.TerminalsLookup.Add((char)115, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("throw"), SymbolTerminal.GetSymbol("true"), SymbolTerminal.GetSymbol("try"), };
      Scanner.TerminalsLookup.Add((char)116, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("using"), };
      Scanner.TerminalsLookup.Add((char)117, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("var"), };
      Scanner.TerminalsLookup.Add((char)118, tl);
      tl = new TerminalList() { v, SymbolTerminal.GetSymbol("while"), };
      Scanner.TerminalsLookup.Add((char)119, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)120, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)121, tl);
      tl = new TerminalList() { v, };
      Scanner.TerminalsLookup.Add((char)122, tl);
      tl = new TerminalList() { n, n, };
      Scanner.TerminalsLookup.Add((char)48, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)49, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)50, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)51, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)52, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)53, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)54, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)55, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)56, tl);
      tl = new TerminalList() { n, };
      Scanner.TerminalsLookup.Add((char)57, tl);
      tl = new TerminalList() { s, };
      Scanner.TerminalsLookup.Add((char)39, tl);
      tl = new TerminalList() { s, };
      Scanner.TerminalsLookup.Add((char)34, tl);
      tl = new TerminalList() { s, };
      Scanner.TerminalsLookup.Add((char)64, tl);
      SymbolTerminal.RegisterPunctuation("(", ")", "[", "]", "{", "}", ",", ";");
      SymbolTerminal.RegisterOperators(1, "=", "+=", "-=", ":=");
      SymbolTerminal.RegisterOperators(2, "|", "||");
      SymbolTerminal.RegisterOperators(3, "&", "&&");
      SymbolTerminal.RegisterOperators(4, "==", "!=", ">", "<", ">=", "<=");
      SymbolTerminal.RegisterOperators(5, "is");
      SymbolTerminal.RegisterOperators(6, "+", "-");
      SymbolTerminal.RegisterOperators(7, "*", "/", "%");
      SymbolTerminal.RegisterOperators(8, Associativity.Right, "^");
      SymbolTerminal.RegisterOperators(9, "~", "!", "$", "++", "--");
      SymbolTerminal.RegisterOperators(10, ".");
      SymbolTerminal.ClearSymbols();
      States.Clear(); States = null;

    }
  }
}
